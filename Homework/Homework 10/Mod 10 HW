# Task 2_16 # Прийшлось скинуть код і переписати заново!!!!!!!!!
# class Animal:
#     def __init__(self, nickname, weight) -> None:
#         self.nickname = nickname
#         self.weight = weight
        
#     def say(self):
#         pass

# nickname ='Jack'
# weight =10
# animal = Animal(nickname,weight ) 

# # Task 3_16
# class Animal:
#     def __init__(self, nickname, weight):
#         self.nickname = nickname
#         self.weight = weight

#     def say(self):
#         pass

#     def change_weight (self, weight):
#         self.weight = weight

#Task 4_16
# class Animal:
#     color = "white"

#     def __init__(self, nickname, weight):
#         self.nickname = nickname
#         self.weight = weight

#     def say(self):
#         pass

#     def change_weight(self, weight):
#         self.weight = weight
    
#     def change_color(self, color):
#         Animal.color = color
        
# first_animal = Animal('nickname', 'weight')
# second_animal = Animal('nickname', 'weight')

# first_animal.change_color("red")
# second_animal.change_color("red")
        
# animal = Animal("Simon", 10)
# animal.change_weight(12)
# print (animal.weight)

#Task 5_16
# class Animal:
#     def __init__(self, nickname, weight):
#         self.nickname = nickname
#         self.weight = weight

#     def say(self):
#         pass

#     def change_weight(self, weight):
#         self.weight = weight

# class Cat(Animal):
#     def say(self):
#         return "Meow"
# cat = Cat("Simon", 10)

# print(cat)

#Task 6_16
# class Animal:
#     def __init__(self, nickname, weight):
#         self.nickname = nickname
#         self.weight = weight

#     def say(self):
#         pass

#     def change_weight(self, weight):
#         self.weight = weight


# class Dog(Animal):
#     def __init__(self, nickname, weight, breed):
#         super().__init__(nickname, weight)
#         self.breed = breed
#     def say(self):
#         return "Woof"    
# dog = Dog("Barbos", 23, "labrador")
# print(dog.nickname)  
# print(dog.weight) 

#Task 7_16
# class Animal:
#     def __init__(self, nickname, weight):
#         self.nickname = nickname
#         self.weight = weight

#     def say(self):
#         pass

#     def change_weight(self, weight):
#         self.weight = weight


# class Owner:
#     def __init__(self, name, age, address):
#         self.name = name
#         self.age = age
#         self.address = address

#     def info(self):        
#         return {"name": self.name, "age": self.age, "address": self.address}
            
        
# class Dog(Animal):
#     def __init__(self, nickname, weight, breed,owner):
#         self.breed = breed
#         self.owner = owner
#         super().__init__(nickname, weight)

#     def say(self):
#         return "Woof"

#     def who_is_owner(self):
#         return self.owner.info() #
  
# # Task 8_16
# class Animal:
#     def __init__(self, nickname, weight):
#         self.nickname = nickname
#         self.weight = weight

#     def say(self):
#         pass


# class Cat(Animal):
#     def say(self):
#         return "Meow"


# class Dog(Animal):
#     def say(self):
#         return "Woof"
        
# class CatDog(Cat, Dog):
#     #def say(self):
#         #return "Meow" 
    
#     def info(self): 
#         return (f"{self.nickname}-{self.weight}")

# class DogCat(Dog, Cat):
#     #def say(self):
#         #pass
        
#     def info(self): 
#         return (f"{self.nickname}-{self.weight}")

# Task 9_16    
# from collections import UserDict


# class LookUpKeyDict(UserDict):
    
#     def lookup_key(self, value):
#         keys = []
#         for key in self.data.keys():
#             if self.data[key] == value:
#                 keys.append(key)
#         return keys 

# Task 10_16 
# from collections import UserList


# class AmountPaymentList(UserList):
#     def amount_payment(self):
#         sum = 0
#         for value in self.data:
#             if value > 0:
#                 sum = sum + value
#             return sum
        